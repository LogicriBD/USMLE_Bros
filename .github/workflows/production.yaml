name: Vercel Production Deployment

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Cloudinary secrets
        run: |
          echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}" >> $GITHUB_ENV
          echo ${{ secrets.CLOUDINARY_API_KEY }} | vercel env add production CLOUDINARY_API_KEY
          echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}" >> $GITHUB_ENV
          echo ${{ secrets.CLOUDINARY_API_SECRET }} | vercel env add production CLOUDINARY_API_SECRET
          echo "CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}" >> $GITHUB_ENV
          echo ${{ secrets.CLOUDINARY_CLOUD_NAME }} | vercel env add production CLOUDINARY_CLOUD_NAME
          echo "CLOUDINARY_URL=${{ secrets.CLOUDINARY_URL }}" >> $GITHUB_ENV
          echo ${{ secrets.CLOUDINARY_URL }} | vercel env add production CLOUDINARY_URL
          echo "API_URL=https://usmle-bros-test.vercel.app" >> $GITHUB_ENV
          echo "https://usmle-bros-test.vercel.app" | vercel env add production API_URL

      - name: Set up Firebase secrets
        run: |
          echo "FIREBASE_PRIVATE_KEY=$(echo ${{ secrets.FIREBASE_PRIVATE_KEY }} | base64 --decode | sed 's/\\n/\n/g')" >> $GITHUB_ENV
          echo ${{ secrets.FIREBASE_PRIVATE_KEY }} | base64 --decode | sed 's/\\n/\n/g' | vercel env add production FIREBASE_PRIVATE_KEY
          echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> $GITHUB_ENV
          echo ${{ secrets.FIREBASE_PROJECT_ID }} | vercel env add production FIREBASE_PROJECT_ID
          echo "FIREBASE_SERVICE_ACCOUNT=${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" >> $GITHUB_ENV
          echo ${{ secrets.FIREBASE_SERVICE_ACCOUNT }} | vercel env add production FIREBASE_SERVICE_ACCOUNT

      - name: Set up Other Environment Variables
        run: |
          echo "NODE_ENV=development" >> $GITHUB_ENV
          echo "development" | vercel env add production NODE_ENV
          echo "FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" >> $GITHUB_ENV
          echo ${{ secrets.FIREBASE_API_KEY }} | vercel env add production FIREBASE_API_KEY
          echo "FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}" >> $GITHUB_ENV
          echo ${{ secrets.FIREBASE_AUTH_DOMAIN }} | vercel env add production FIREBASE_AUTH_DOMAIN
          echo "FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}" >> $GITHUB_ENV
          echo ${{ secrets.FIREBASE_STORAGE_BUCKET }} | vercel env add production FIREBASE_STORAGE_BUCKET
          echo "FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}" >> $GITHUB_ENV
          echo ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }} | vercel env add production FIREBASE_MESSAGING_SENDER_ID
          echo "FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}" >> $GITHUB_ENV
          echo ${{ secrets.FIREBASE_APP_ID }} | vercel env add production FIREBASE_APP_ID
          echo "FIREBASE_MEASUREMENT_ID=${{ secrets.FIREBASE_MEASUREMENT_ID }}" >> $GITHUB_ENV
          echo ${{ secrets.FIREBASE_MEASUREMENT_ID }} | vercel env add production FIREBASE_MEASUREMENT_ID
          echo "GOOGLE_ADSENSE_CLIENT=${{ secrets.GOOGLE_ADSENSE_CLIENT }}" >> $GITHUB_ENV
          echo ${{ secrets.GOOGLE_ADSENSE_CLIENT }} | vercel env add production GOOGLE_ADSENSE_CLIENT
          echo "DATA_AD_SLOT_DISPLAY_AD=${{ secrets.DATA_AD_SLOT_DISPLAY_AD }}" >> $GITHUB_ENV
          echo ${{ secrets.DATA_AD_SLOT_DISPLAY_AD }} | vercel env add production DATA_AD_SLOT_DISPLAY_AD

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=Production --token=${{ secrets.VERCEL_TOKEN }} && cat .vercel/.env.production.local

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

    environment:
      name: Vercel Actions Production Deployment
      url: ${{ job.status == 'success' && steps.deploy.outputs.url }}
